> library(readr)
> neutron <- read_csv("~/OneDrive/Documents/HDA/Introduction to statistical thinking/Week 4/problem  set 4/neutron.csv")
library(readr)
neutron <- read_csv("neutron.csv")
View(neutron)
> neutron <- read_csv("~/OneDrive/Documents/HDA/Introduction to statistical thinking/Week 4/problem  set 4/neutron.csv")
library(readr)
neutron <- read_csv("~/OneDrive/Documents/HDA/Introduction to statistical thinking/Week 4/problem  set 4/neutron.csv")
library(readr)
neutron <- read_csv("~/OneDrive/Documents/HDA/Introduction to statistical thinking/Week 4/problem  set 4/neutron.csv")
# estimating prob  --------------------------------------------------------
neutronmodel <- glm(death1year ~ id , family = binomial , data = neutron)
library(readr)
neutron <- read_csv("~/OneDrive/Documents/HDA/Introduction to statistical thinking/Week 4/problem  set 4/neutron.csv")
# estimating prob  --------------------------------------------------------
neutronmodel <- glm(death1year ~ id , family = binomial , data = neutron)
library(readr)
neutron <- read_csv("~/OneDrive/Documents/HDA/Introduction to statistical thinking/Week 4/problem  set 4/neutron.csv")
# estimating prob  --------------------------------------------------------
#Estimate the probability of death within one year of cancer diagnosis (assuming that the treatment
#has no effect on survival) and calculate the 95% confidence interval for the probability.
prop.table(table(neutron$death1year))
prop.table(table(neutron$death1year))["Yes"]
#function
probability<- function(col){
colprop<- prop.table(table(col))
return(colprop)
}
probability(neutron$death1year)
# confidence interval  ----------------------------------------------------
#exploring possibility of a function
as.factor(neutron$death1year)
neutorontable<-table(neutron$death1year)
neutorontable
table1<-table(neutorontable)
table1_df<-data.frame(table1)
table1_df[1,1]
table1_df[2,1]
length(neutron$death1year)
CI_binomial_NO<- function(df){
table<-df %>% table() %>% data.frame ()
ci<-prop.test(x= table [1,2], n=(length(df)), conf.level=.95, correct=FALSE)
return(ci)
}
CI_binomial_Yes<- function(df){
table<-df %>% table() %>% data.frame ()
ci<-prop.test(x= table [2,2], n=(length(df)), conf.level=.95, correct=FALSE)
return(ci)
}
CI_binomial<- function(df, die){
ci <- NULL
if(die) {
table<-df %>% table() %>% data.frame ()
ci<-prop.test(x= table [2,2], n=(length(df)), conf.level=.95, correct=FALSE)
} else {
table<-df %>% table() %>% data.frame ()
ci<-prop.test(x= table [1,2], n=(length(df)), conf.level=.95, correct=FALSE)
}
return(ci)
}
#confirm it works
CI_binomial_Yes(neutron$death1year)
library(purrr)
library(readr)
neutron <- read_csv("~/OneDrive/Documents/HDA/Introduction to statistical thinking/Week 4/problem  set 4/neutron.csv")
# estimating prob  --------------------------------------------------------
#Estimate the probability of death within one year of cancer diagnosis (assuming that the treatment
#has no effect on survival) and calculate the 95% confidence interval for the probability.
prop.table(table(neutron$death1year))
prop.table(table(neutron$death1year))["Yes"]
#function
probability<- function(col){
colprop<- prop.table(table(col))
return(colprop)
}
probability(neutron$death1year)
# confidence interval  ----------------------------------------------------
#exploring possibility of a function
as.factor(neutron$death1year)
neutorontable<-table(neutron$death1year)
neutorontable
table1<-table(neutorontable)
table1_df<-data.frame(table1)
table1_df[1,1]
table1_df[2,1]
length(neutron$death1year)
CI_binomial_NO<- function(df){
table<-df %>% table() %>% data.frame ()
ci<-prop.test(x= table [1,2], n=(length(df)), conf.level=.95, correct=FALSE)
return(ci)
}
CI_binomial_Yes<- function(df){
table<-df %>% table() %>% data.frame ()
ci<-prop.test(x= table [2,2], n=(length(df)), conf.level=.95, correct=FALSE)
return(ci)
}
CI_binomial<- function(df, die){
ci <- NULL
if(die) {
table<-df %>% table() %>% data.frame ()
ci<-prop.test(x= table [2,2], n=(length(df)), conf.level=.95, correct=FALSE)
} else {
table<-df %>% table() %>% data.frame ()
ci<-prop.test(x= table [1,2], n=(length(df)), conf.level=.95, correct=FALSE)
}
return(ci)
}
#confirm it works
CI_binomial_Yes(neutron$death1year)
CI_binomial(neutron$death1year, F)
CI_binomial(neutron$death1year)
risk_dif<-function(x,y){
t<-table(x,y) %>% data.frame ()
a<-t[3,3]
b<-t[4,3]
no<-t[1,3]+t[3,3]
n1<-t[2,3]+t[4,3]
exposed<-riskdifference(a, b, no, n1, CRC=TRUE, conf.level=0.95)
return(exposed)
}
risk_dif(neutron$treatment,neutron$death1year)
library(fmsb)
risk_dif<-function(x,y){
t<-table(x,y) %>% data.frame ()
a<-t[3,3]
b<-t[4,3]
no<-t[1,3]+t[3,3]
n1<-t[2,3]+t[4,3]
exposed<-riskdifference(a, b, no, n1, CRC=TRUE, conf.level=0.95)
return(exposed)
}
risk_dif(neutron$treatment,neutron$death1year)
save.image("~/OneDrive/Documents/HDA/Introduction to statistical thinking/Week 4/problem  set 4/porblem set data.RData")
# risk ratio  -------------------------------------------------------------
riskratio.wald(p, y = NULL,
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = TRUE)
View(CI_binomial)
View(neutron)
View(table1_df)
risk_dif<-function(x,y){
t<-table(x,y) %>% data.frame ()
a<-t[3,3]
b<-t[4,3]
no<-t[1,3]+t[3,3]
n1<-t[2,3]+t[4,3]
exposed<-riskdifference(a, b, no, n1, CRC=TRUE, conf.level=0.95)
return(exposed)
}
risk_dif(neutron$treatment,neutron$death1year)
library(purrr)
library(fmsb)
risk_dif<-function(x,y){
t<-table(x,y) %>% data.frame ()
a<-t[3,3]
b<-t[4,3]
no<-t[1,3]+t[3,3]
n1<-t[2,3]+t[4,3]
exposed<-riskdifference(a, b, no, n1, CRC=TRUE, conf.level=0.95)
return(exposed)
}
risk_dif(neutron$treatment,neutron$death1year)
# risk ratio  -------------------------------------------------------------
riskratio.wald(p, y = NULL,
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = TRUE)
library(epitools)
# risk ratio  -------------------------------------------------------------
riskratio.wald(p, y = NULL,
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = TRUE)
# contingencyy  table  ------------------------------------------------------
p<-table(neutron$treatment,neutron$death1year)
# risk ratio  -------------------------------------------------------------
riskratio.wald(p, y = NULL,
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = TRUE)
# odds ratio  -------------------------------------------------------------
oddsratio(p, y = NULL,
method = c("midp"),
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = FALSE)
# odds ratio  -------------------------------------------------------------
oddsratio(p, y = NULL,
method = c("midp"),
conf.level = 0.95,
rev = c("colums"),
correction = FALSE,
verbose = FALSE)
# odds ratio  -------------------------------------------------------------
oddsratio(p, y = NULL,
method = c("midp"),
conf.level = 0.95,
rev = c("columns"),
correction = FALSE,
verbose = FALSE)
# odds ratio  -------------------------------------------------------------
oddsratio(p, y = NULL,
method = c("midp"),
conf.level = 0.95,
rev = c("both"),
correction = FALSE,
verbose = FALSE)
# odds ratio  -------------------------------------------------------------
oddsratio.wald(p, y = NULL,
method = c("midp"),
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = FALSE)
# odds ratio  -------------------------------------------------------------
oddsratio(p, y = NULL,
method = c("midp"),
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = FALSE)
oddsratio(p)
#risk ratio
riskratio.wald(meta_death, y = NULL,
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = TRUE)
#risk ratio
riskratio.wald(meta_death, y = NULL,
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = TRUE)
# making tablle for meta 1 year  ------------------------------------------
meta1year<- ifelse(neutron$meta =="Yes" & neutron$metatime <=365,"MYes","MNo")
neutron_meta<-cbind(neutron,meta1year)
# risk difference , RR, OR ------------------------------------------------
#risk diffence
risk_dif(neutron_meta$meta1year,neutron_meta$death1year)
Z<-chisq.test(p, y = NULL, correct = FALSE,
p = rep(1/length(x), length(x)), rescale.p = FALSE,
simulate.p.value = FALSE, B = 2000)
Z$observed
Z$expected
View(Z)
Z<-chisq.test(log(p), y = NULL, correct = FALSE,
p = rep(1/length(x), length(x)), rescale.p = FALSE,
simulate.p.value = FALSE, B = 2000)
# odds ratio  -------------------------------------------------------------
oddsratio(log(p), y = NULL,
method = c("midp"),
conf.level = 0.95,
rev = c("neither"),
correction = FALSE,
verbose = FALSE)
View(risk_dif)
View(CI_binomial)
View(CI_binomial)
View(probability)
View(risk_dif)
